{"ast":null,"code":"import { FormControl, FormGroup, Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"ngx-toastr\";\nimport * as i2 from \"ngx-spinner\";\nimport * as i3 from \"src/app/shared/bicycle-request/bicycle-request.service\";\nimport * as i4 from \"@angular/router\";\nimport * as i5 from \"src/app/shared/adminauth/adminauth.service\";\nimport * as i6 from \"@angular/forms\";\nimport * as i7 from \"@angular/common\";\n\nfunction MakeBookingComponent_span_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 11);\n    i0.ɵɵtext(1, \"Required\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction MakeBookingComponent_span_16_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 11);\n    i0.ɵɵtext(1, \"Required\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nexport let MakeBookingComponent = /*#__PURE__*/(() => {\n  class MakeBookingComponent {\n    constructor(toastr, spinner, bicycle, activateroute, adminauth) {\n      this.toastr = toastr;\n      this.spinner = spinner;\n      this.bicycle = bicycle;\n      this.activateroute = activateroute;\n      this.adminauth = adminauth;\n      this.addForm = new FormGroup({\n        'bicycleId': new FormControl(''),\n        'hirerId': new FormControl(''),\n        'startDateTime': new FormControl('', Validators.required),\n        'numOfHours': new FormControl('', Validators.required)\n      });\n    }\n\n    ngOnInit() {\n      this.spinner.show();\n      setTimeout(() => {\n        this.spinner.hide();\n      }, 500);\n      this.addForm.patchValue({\n        'bicycleId': this.activateroute.snapshot.paramMap.get('id')\n      });\n      this.addForm.patchValue({\n        'hirerId': this.adminauth.getadminid()\n      });\n    }\n\n    submit() {\n      this.spinner.show();\n      this.bicycle.add(this.addForm.value).subscribe({\n        next: res => {\n          this.spinner.hide();\n\n          if (res.success) {\n            this.toastr.success(res.message);\n            this.addForm.reset();\n          } else {\n            this.toastr.error(res.message);\n          }\n        },\n        error: () => {\n          this.spinner.hide();\n          this.toastr.error('Server Error');\n        }\n      });\n    }\n\n  }\n\n  MakeBookingComponent.ɵfac = function MakeBookingComponent_Factory(t) {\n    return new (t || MakeBookingComponent)(i0.ɵɵdirectiveInject(i1.ToastrService), i0.ɵɵdirectiveInject(i2.NgxSpinnerService), i0.ɵɵdirectiveInject(i3.BicycleRequestService), i0.ɵɵdirectiveInject(i4.ActivatedRoute), i0.ɵɵdirectiveInject(i5.AdminauthService));\n  };\n\n  MakeBookingComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: MakeBookingComponent,\n    selectors: [[\"app-make-booking\"]],\n    decls: 20,\n    vars: 4,\n    consts: [[\"type\", \"ball-scale-multiple\"], [1, \"contact-form\"], [1, \"container\"], [1, \"contact-heading\"], [\"id\", \"contact\", 3, \"formGroup\"], [\"for\", \"datetime\"], [\"placeholder\", \"Start Date Time\", \"formControlName\", \"startDateTime\", \"type\", \"datetime-local\", \"required\", \"\", \"autofocus\", \"\"], [\"class\", \"text-danger\", 4, \"ngIf\"], [\"for\", \"hours\"], [\"placeholder\", \"No. of Hours\", \"formControlName\", \"numOfHours\", \"type\", \"number\", \"required\", \"\"], [\"type\", \"button\", 1, \"btn\", \"btn-warning\", 3, \"disabled\", \"click\"], [1, \"text-danger\"]],\n    template: function MakeBookingComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelement(0, \"ngx-spinner\", 0);\n        i0.ɵɵelementStart(1, \"section\", 1)(2, \"div\", 2)(3, \"div\", 3)(4, \"h1\");\n        i0.ɵɵtext(5, \"Booking Details\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(6, \"form\", 4)(7, \"fieldset\")(8, \"label\", 5);\n        i0.ɵɵtext(9, \"Start Date Time*\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(10, \"input\", 6);\n        i0.ɵɵtemplate(11, MakeBookingComponent_span_11_Template, 2, 0, \"span\", 7);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(12, \"fieldset\")(13, \"label\", 8);\n        i0.ɵɵtext(14, \"No. of Hours*\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(15, \"input\", 9);\n        i0.ɵɵtemplate(16, MakeBookingComponent_span_16_Template, 2, 0, \"span\", 7);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(17, \"fieldset\")(18, \"button\", 10);\n        i0.ɵɵlistener(\"click\", function MakeBookingComponent_Template_button_click_18_listener() {\n          return ctx.submit();\n        });\n        i0.ɵɵtext(19, \"Submit\");\n        i0.ɵɵelementEnd()()()()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"formGroup\", ctx.addForm);\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngIf\", ctx.addForm.controls[\"startDateTime\"].invalid && ctx.addForm.controls[\"startDateTime\"].touched);\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngIf\", ctx.addForm.controls[\"numOfHours\"].invalid && ctx.addForm.controls[\"numOfHours\"].touched);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"disabled\", ctx.addForm.invalid);\n      }\n    },\n    directives: [i2.NgxSpinnerComponent, i6.ɵNgNoValidate, i6.NgControlStatusGroup, i6.FormGroupDirective, i6.DefaultValueAccessor, i6.NgControlStatus, i6.FormControlName, i6.RequiredValidator, i7.NgIf, i6.NumberValueAccessor],\n    styles: [\"\"]\n  });\n  return MakeBookingComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}